
import { useRef } from 'react';
import { useToast } from '@/hooks/use-toast';
import { VistoriaSupabase } from '@/hooks/useVistoriasSupabase';
import { preloadImages } from '@/utils/pdf/imageUtils';
import { createPDF, processPageWithFallback, addImageToPDF } from '@/utils/pdf/pdfUtils';
import { getErrorMessage } from '@/utils/pdf/errorUtils';

export const usePDFGenerator = () => {
  const { toast } = useToast();
  const reportRef = useRef<HTMLDivElement>(null);

  const generatePDF = async (vistoria: VistoriaSupabase) => {
    console.log('üéØ === INICIANDO GERA√á√ÉO DO PDF ===');
    console.log('üìä Vistoria:', vistoria.numero_interno);
    console.log('üìä Grupos na vistoria:', vistoria.grupos?.length || 0);

    if (!reportRef.current) {
      console.error('‚ùå Refer√™ncia do relat√≥rio n√£o encontrada');
      toast({
        title: "Erro",
        description: "Refer√™ncia do relat√≥rio n√£o encontrada.",
        variant: "destructive",
      });
      return;
    }

    try {
      const reportElement = reportRef.current;
      
      console.log('üèóÔ∏è Estrutura do reportRef:', {
        children: reportElement.children.length,
        className: reportElement.className,
        scrollHeight: reportElement.scrollHeight,
        scrollWidth: reportElement.scrollWidth,
        isConnected: reportElement.isConnected
      });
      
      toast({
        title: "Gerando PDF",
        description: "Preparando conte√∫do...",
      });

      // Aguardar estabiliza√ß√£o do DOM
      console.log('‚è≥ Aguardando estabiliza√ß√£o do DOM...');
      await new Promise(resolve => setTimeout(resolve, 2000));

      // Verificar se h√° grupos com fotos
      const gruposComFotos = vistoria.grupos?.filter(grupo => grupo.fotos && grupo.fotos.length > 0) || [];
      console.log(`üì∏ Grupos com fotos: ${gruposComFotos.length}`);
      
      if (gruposComFotos.length === 0) {
        throw new Error('Nenhum grupo com fotos encontrado para gerar o PDF');
      }

      // Aguardar carregamento das imagens
      toast({
        title: "Gerando PDF",
        description: "Aguardando carregamento das imagens...",
      });

      console.log('üñºÔ∏è Iniciando pr√©-carregamento de imagens...');
      await preloadImages(reportElement);
      console.log('‚úÖ Pr√©-carregamento conclu√≠do');

      // Aguardar mais tempo ap√≥s o carregamento das imagens
      await new Promise(resolve => setTimeout(resolve, 1500));

      // Buscar p√°ginas de forma mais simples
      console.log('üîç Buscando p√°ginas do relat√≥rio...');
      let pages = Array.from(reportElement.querySelectorAll(".page")) as HTMLElement[];
      
      if (pages.length === 0) {
        console.log('‚ùå Nenhuma p√°gina com classe .page encontrada, tentando busca alternativa...');
        // Tentar buscar por divs com min-h-screen
        pages = Array.from(reportElement.querySelectorAll('[class*="min-h-screen"]')) as HTMLElement[];
      }

      if (pages.length === 0) {
        console.log('‚ùå Tentando usar children diretos do reportElement...');
        pages = Array.from(reportElement.children).filter(child => {
          const element = child as HTMLElement;
          return element.offsetHeight > 200;
        }) as HTMLElement[];
      }

      console.log(`üìÑ P√°ginas encontradas: ${pages.length}`);

      if (pages.length === 0) {
        throw new Error('Nenhuma p√°gina encontrada para processar. Verifique se o conte√∫do foi carregado corretamente.');
      }

      // Filtrar apenas p√°ginas v√°lidas
      const paginasValidas = pages.filter((page, index) => {
        if (!page) {
          console.error(`‚ùå P√°gina ${index + 1} √© nula!`);
          return false;
        }
        
        const isInDOM = document.contains(page);
        const rect = page.getBoundingClientRect();
        const isVisible = rect.width > 0 && rect.height > 0;
        
        console.log(`üìä P√°gina ${index + 1} - No DOM: ${isInDOM}, Vis√≠vel: ${isVisible}`);
        
        return isInDOM && isVisible;
      });

      if (paginasValidas.length === 0) {
        throw new Error('Nenhuma p√°gina v√°lida encontrada ap√≥s valida√ß√£o');
      }

      console.log(`‚úÖ P√°ginas v√°lidas: ${paginasValidas.length}/${pages.length}`);

      toast({
        title: "Gerando PDF",
        description: "Processando p√°ginas...",
      });

      const pdf = createPDF();
      let paginasProcessadas = 0;

      // Processar p√°ginas uma por vez
      for (let i = 0; i < paginasValidas.length; i++) {
        console.log(`üöÄ === PROCESSANDO P√ÅGINA ${i + 1}/${paginasValidas.length} ===`);
        
        toast({
          title: "Gerando PDF",
          description: `Processando p√°gina ${i + 1} de ${paginasValidas.length}...`,
        });

        try {
          const page = paginasValidas[i];
          
          if (!page || !document.contains(page)) {
            console.error(`‚ùå P√°gina ${i + 1} n√£o est√° v√°lida para processamento`);
            continue;
          }
          
          console.log(`‚úÖ Processando p√°gina ${i + 1}...`);
          
          const imageData = await processPageWithFallback(page, i);
          addImageToPDF(pdf, imageData, i > 0);
          paginasProcessadas++;
          
          console.log(`‚úÖ P√°gina ${i + 1} processada com sucesso`);
          
        } catch (pageError) {
          console.error(`‚ùå Erro na p√°gina ${i + 1}:`, pageError);
          
          // Se √© a primeira p√°gina e falhou, √© erro cr√≠tico
          if (i === 0 && paginasProcessadas === 0) {
            throw new Error(`Erro cr√≠tico na primeira p√°gina: ${pageError.message}`);
          }
        }
        
        // Pausa entre p√°ginas
        if (i < paginasValidas.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }

      if (paginasProcessadas === 0) {
        throw new Error('Nenhuma p√°gina foi processada com sucesso');
      }

      const fileName = `Relatorio-${vistoria.numero_interno}-${vistoria.condominio?.nome?.replace(/\s+/g, "-") || 'Vistoria'}.pdf`;
      console.log('üíæ Finalizando PDF:', fileName);
      
      console.log(`üéâ === PDF GERADO COM SUCESSO ===`);
      console.log(`üìÑ P√°ginas no PDF: ${pdf.getNumberOfPages()}`);
      console.log(`‚úÖ P√°ginas processadas: ${paginasProcessadas}/${paginasValidas.length}`);
      
      pdf.save(fileName);

      toast({
        title: "PDF Gerado",
        description: `Relat√≥rio gerado com ${paginasProcessadas} p√°gina(s) e baixado com sucesso.`,
      });

    } catch (error) {
      console.error('‚ùå === ERRO DETALHADO NA GERA√á√ÉO DO PDF ===');
      console.error('‚ùå Erro:', error);
      
      const errorMessage = getErrorMessage(error);
      
      toast({
        title: "Erro na Gera√ß√£o do PDF",
        description: errorMessage,
        variant: "destructive",
      });
    }
  };

  return {
    reportRef,
    generatePDF
  };
};
